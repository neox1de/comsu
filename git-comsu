#!/bin/bash

# Define ANSI color codes
RED='\033[0;31m'
GRAY='\033[0;37m'
GREEN='\033[0;32m'
ICYAN='\033[0;96m'
YELLOW='\033[1;33m'
IYELLOW='\033[0;93m'
NC='\033[0m'

if [[ -z "$GOOGLE_AI_STUDIO_API_KEY" ]]; then
    USE_OLLAMA=true
else
    USE_OLLAMA=false
    API_URL="https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GOOGLE_AI_STUDIO_API_KEY"
fi

OLLAMA_URL="http://localhost:11434/api/tags"

get_staged_changes() {
    changes=$(git diff --cached)
    clean_changes=$(echo "$changes" | sed ':a;N;$!ba;s/\n/ /g' | sed 's/"/\\"/g' | sed "s/'/\\'/g")
    echo "$clean_changes"
}

generate_commit_messages_google() {
    local changes="$1"
    PROMPT_FILE="/usr/local/share/git-comsu/prompt"

    if [[ ! -f "$PROMPT_FILE" ]]; then
        echo "Error: $PROMPT_FILE file not found!"
        exit 1
    fi

    prompt_template=$(< "$PROMPT_FILE")
    prompt="${prompt_template} Changes: $changes"

    json_payload=$(jq -n --arg text "$prompt" '{"contents":[{"parts":[{"text":$text}]}]}')
    response=$(curl -s -H "Content-Type: application/json" -d "$json_payload" -X POST "$API_URL")
    suggested_messages=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text' 2>/dev/null || echo "Error parsing response")
    echo "$suggested_messages"
}

generate_commit_messages_ollama() {
    local changes="$1"
    PROMPT_FILE="/usr/local/share/git-comsu/prompt"

    if [[ ! -f "$PROMPT_FILE" ]]; then
        echo "Error: $PROMPT_FILE file not found!"
        exit 1
    fi

    prompt_template=$(< "$PROMPT_FILE")
    prompt="${prompt_template} Changes: $changes"

    models=$(curl -s "$OLLAMA_URL" | jq -r '.models | sort_by(.modified_at) | reverse | .[0].name' 2>/dev/null)

    if [[ -z "$models" ]]; then
        echo -e "${RED}Error: No models available in Ollama.${NC}"
        exit 1
    fi

    recent_model="$models"
    json_payload=$(jq -n --arg model "$recent_model" --arg prompt "$prompt" '{"model":$model,"prompt":$prompt, "stream": false}')
    response=$(curl -s -H "Content-Type: application/json" -d "$json_payload" -X POST "http://localhost:11434/api/generate")
    suggested_messages=$(echo "$response" | jq -r '.response' 2>/dev/null || echo "Error parsing response")
    echo "$suggested_messages"
}

commit_message() {
    local messages=("$@")
    
    for i in "${!messages[@]}"; do
        echo -e "${IYELLOW}$((i+1)). ${messages[i]}${NC}"
    done

    echo
    read -p "Write the message number you want to use (write 'x' to exit): " choice
    echo

    if [[ "$choice" == "x" ]]; then
        echo -e "${RED}Exiting without committing.${NC}"
        exit 0
    elif [[ "$choice" -gt 0 && "$choice" -le "${#messages[@]}" ]]; then
        selected_message="${messages[$((choice-1))]}"
        commit_output=$(git commit -m "$selected_message" 2>&1)
        echo -e "${GRAY}${commit_output}${NC}"
        echo
        echo -e "${GREEN}Committed successfully.${NC}"
    else
        echo -e "${RED}Invalid choice. Exiting without committing.${NC}"
        exit 0
    fi
}

main() {
    changes=$(get_staged_changes)

    if [ -z "$changes" ]; then
        echo -e "${YELLOW}No staged changes found.${NC}"
        echo -e "${YELLOW}You should first add at least one file to stage.${NC}"
        exit 1
    fi

    echo -e "${ICYAN}Generating the commit messages based on your changes ...${NC}"
    echo

    if [[ "$USE_OLLAMA" == true ]]; then
        messages=$(generate_commit_messages_ollama "$changes")
    else
        messages=$(generate_commit_messages_google "$changes")
    fi

    IFS=$'\n' read -r -d '' -a messages_array <<< "$messages"
    commit_message "${messages_array[@]}"
}

main

